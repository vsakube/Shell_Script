#!/bin/bash

################# if else example and equality comparison examples
n=91
m=90
if [ $n -lt 10 ] # for numbers -lt -gt -eq and for strings = < and > and -z for is empty and -n for is not empty
then
    echo $n
else
    echo $m
fi

str1="apple"
str2="APPLE"
str3="randomstring"
str4="apple"

if [ $str1 = $str2 ]
then
    echo "Lexicographic Equal"
else
    echo "Lexicographic Unequal"
fi

if [ $str1 = $str4 ] ############ similarly for lexicographic comparison < and > also work
then
    echo "Lexicographic Equal"
else
    echo "Lexicographic Unequal"
fi

if [ $str1 = $str3 ]
then
    echo "Lexicographic Equal"
else
    echo "Lexicographic Unequal"
fi

############  For loop example
str5="A quick brown fox"
for s in $str5
do
    echo $s
done

if [ -z $str1 ] # -z tests for is empty and -n tests for is not empty
then
    echo "Empty"
else
    echo "Not Empty"
fi

str6=""
if [ -z $str6 ]
then
    echo "Empty"
else
    echo "Not Empty"
fi

################  Pipelining
################  command1 | command2 | command3 ... means that output of command1 is passed as input to command2, and the output of command2 is passed as input to command3, and so on
echo $(ls -l | grep .cpp | wc -l)

################# command output storage
files=$(ls -l)
for f in $files
do
    echo $f
done

############## Create a command to be executed on the fly and execute and print the output
cmd="ls -l | wc -l && echo \"evaled command executed\""

output=$(eval "$cmd")
echo $output

########### or just execute directly without storing the output
eval "$cmd"

############## AWK awk 'pattern { action }' file.txt

: << 'COMMENT'
Awk provides several built-in variables that you can use in your awk commands:
$0: Represents the entire input line.
$1, $2, $3, ...: Represent the fields of the input line, separated by a specified delimiter (default is whitespace).
NR: Represents the record (line) number.
NF: Represents the number of fields in the current line.
COMMENT

cat file.txt | awk '{ print  $1, $2 $3 $4 }' file.txt
echo "A Quick Brown Fox" | awk '{ print $1, $2 $3 $4}' file.txt

awk '{
    n = split($0, array, /!!/)
    for (i = 1; i <= n; i++) {
        print array[i]
    }
}' file.txt

cat file.txt | awk '{
    n = split($0, array, /!!/)
    for (i = 1; i <= n; i++) {
        print array[i]
    }
}'

echo "A Quick Brown Fox" |  awk '{
    n = split($0, array, /!!/)
    for (i = 1; i <= n; i++) {
        print array[i]
    }
}'

